
#! /usr/bin/python3

PACKAGE = 'pcl_detector'
import roslib

roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Add a parameter to select the detector type
enum_detectors = gen.enum([ gen.const("DBSCAN", int_t, 0, "DBSCAN"),
                            gen.const("Euclidean", int_t, 1, "Euclidean"),
                            gen.const("GMM", int_t, 2, "GMM"),
                            gen.const("OPTICS", int_t, 3, "OPTICS")],
                          "Choose the detector type to use")
gen.add("detector_type", int_t, 0, "Detector Type", 0, 0, 3, edit_method=enum_detectors)

# Add groups for each detector type
dbscan = gen.add_group("DBSCAN")
dbscan.add("dbscan_epsilon", double_t, 0, "maximum allowed distance between points", 0.1, 0.01, 10.0)
dbscan.add("dbscan_min_points", int_t, 0, "minimum number of points in a cluster", 100, 0, 1000)

euclidean = gen.add_group("Euclidean")
euclidean.add("euclidean_cluster_tolerance", double_t, 0, "cluster tolerance", 0.5, 0.1, 5.0)
euclidean.add("euclidean_min_points", int_t, 0, "minimum number of points in a cluster", 100, 0, 1000)

gmm = gen.add_group("GMM")
gmm.add("gmm_num_clusters", int_t, 0, "number of clusters", 10, 1, 100)
gmm.add("gmm_max_iterations", int_t, 0, "maximum number of iterations", 100, 1, 1000)
gmm.add("gmm_step_size", double_t, 0, "step size", 0.01, 0.001, 1.0)

optics = gen.add_group("OPTICS")
optics.add("optics_epsilon", double_t, 0, "maximum allowed distance between points", 0.5, 0.1, 5.0)
optics.add("optics_min_points", int_t, 0, "minimum number of points in a cluster", 100, 0, 1000)

exit(gen.generate(PACKAGE, "pcl_detector", "PclDetector"))
